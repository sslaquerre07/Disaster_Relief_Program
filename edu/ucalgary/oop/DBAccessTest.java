package edu.ucalgary.oop;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
import java.sql.*;
import java.util.ArrayList;

/*
 * IMPORTANT NOTE:
 * ALL OF THE TESTS RUN HERE ARE BASED ON THE ASSUMPTION THAT THE DATA IN THE DATABASE REFELCTS THE 
 * DATA PROVIDED IN THE PROJECT.SQL FILE, IF YOU CHANGE THE DATA AT ALL, THE TESTS MAY NOT RUN ANYMORE
 * AS INTENDED. THE ONLY REQUIREMENT TESTED HERE IS THE PARTIAL SEARCH ON DISASTER VICTIMS.
 */

public class DBAccessTest {
    private DBAccess dbConnection;

    //Helper function to measure resultSet size
    private int resultSize(ResultSet result){
        int rowCount = 0;
        try{
            while(result.next()){
                rowCount++;
            }
        }
        catch(SQLException ex){
            ex.printStackTrace();
        }
        return rowCount;
    }

    @Before
    public void setup(){
        this.dbConnection = new DBAccess();
    }

    @Test 
    public void testConnectionSetup(){
        //Test the creation of a connection for the DB defined in the DBAccess.java file with the oop user
        DBAccess newConnection = new DBAccess();
        assertNotNull("This newConnection should be established successfully", newConnection);
    }

    @Test 
    public void testInquirerRetrieval(){
        //Should return one result with the inquirer provided
        ResultSet results = this.dbConnection.retrieveInquirer("Yaa", "Odei");
        int size = this.resultSize(results);
        assertEquals("The size of the resultSet is incorrect", 1, size);
    }

    @Test 
    public void testLocationRetrieval(){
        //Should return one result with the location provided
        ResultSet results = this.dbConnection.retrieveLocation("Office A");
        int size = this.resultSize(results);
        assertEquals("The size of the resultSet is incorrect", 1, size);
    }

    @Test 
    public void testDisasterVictimRetrieval(){
        //Should return one result with the location provided
        //Note, this searches based on exact name
        ResultSet results = this.dbConnection.retrieveDisasterVictim("John", "Doe");
        int size = this.resultSize(results);
        assertEquals("The size of the resultSet is incorrect", 1, size);
    }

    @Test 
    public void testDisasterVictimSearch(){
        //Should return one result with the location provided
        //Note: Should return John, Jane, Jessica and James (overall size 4)
        //Note: This is the test that satisfies the requirement of partial search
        ResultSet results = this.dbConnection.searchDisasterVictim("J");
        int size = this.resultSize(results);
        assertEquals("The size of the resultSet is incorrect", 4, size);
    }

    /*Note: No tests for the retrieve all functions as it tests the same functionality, just with a different query */
    @Test
    public void testAddInquirer(){
        //Should just add the one inquirer to the DB
        Inquirer newInquirer = new Inquirer("Bob", "Bobby", "403-333-3333", "Default");
        assertEquals("The inquirer was not added", 1, this.dbConnection.addInquirer(newInquirer.getFirstName(), newInquirer.getLastName(), newInquirer.getServicesPhoneNum()));
    }
    
    @Test
    public void testAddInquiry(){
        //Should just add the one inquiry to the DB
        DisasterVictim missingPerson = new DisasterVictim("Test", "2022-02-02", 25);
        Inquiry newInquiry = new Inquiry(missingPerson, "2024-03-23", "default");
        //Note: arbitrary values are added in, normally the id values would be generated by the GUI
        assertEquals("The inquirer was not added", 1, this.dbConnection.addInquiry(5, 7, 1, newInquiry));
    }

    //No addDisasterVictimTest, it is very dependent on the user input and uses some of the other functions, which will be tested

    @Test
    public void testAddLocation(){
        //Should just add the one location to the DB
        Location newLocation = new Location("Test", "Test");
        assertEquals("The inquirer was not added", 1, this.dbConnection.addLocation(newLocation));
    }

    @Test
    public void testMedicalRecords(){
        //Should just add two medical records to the DB
        ArrayList<MedicalRecord> newRecords = new ArrayList<>();
        Location newLocation = new Location("Test", "Test");
        newRecords.add(new MedicalRecord(newLocation, "test", "2022-02-02"));
        newRecords.add(new MedicalRecord(newLocation, "test", "2022-02-02"));
        //Again using arbitrary values to test properly
        assertEquals("The medical records were not added properly", 2, this.dbConnection.addMedicalRecords(newRecords, 2, 2));
    }

    @Test
    public void testFamilyRelation(){
        //Should just add the relation to the DB
        //Once again, the design of this function was very much focused around the UI, so a lot of preparation is needed
        DisasterVictim missingPerson = new DisasterVictim("John", "2022-02-02", 25);
        missingPerson.setLastName("Doe");
        DisasterVictim missingPersonRelative = new DisasterVictim("Jane", "2022-02-02", 25);
        missingPersonRelative.setLastName("Smith");
        missingPerson.addFamilyConnection(missingPersonRelative, "sibling");
        ArrayList<DisasterVictim> relatives = new ArrayList<>();
        relatives.add(missingPersonRelative);
        assertEquals("The relation was not added", 1, this.dbConnection.addFamilyRelations(missingPerson, relatives));
    }

    @Test
    public void testValidLocationIDCheck(){
        //Should return true if locationID between 1-10 based on current DB input
        assertTrue("This should return true", this.dbConnection.validLocationID(5));
    }

    @After
    public void takeDown(){
        //Runs after all other tests
        dbConnection.close();
    }
}
